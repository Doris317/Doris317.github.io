<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>RocketMQ源码解析（一）</title>
    <url>/2021/03/11/RocketMQ/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>消息队列</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>C++之extern</title>
    <url>/2019/03/17/C-%E4%B9%8Bextern/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>C++学习之__attribute__机制</title>
    <url>/2021/03/17/C-%E5%AD%A6%E4%B9%A0%E4%B9%8B-attribute/</url>
    <content><![CDATA[<p>__attribute__是GNU C特色之一，可以设置函数属性（Function Attribute ）、变量属性（Variable Attribute ）和类型属性（Type Attribute)等.</p>
<p>语法格式： __attribute __((abute-list))</p>
<p>位置：声明结束符“；”的前面</p>
<p><em>在使用__attribute__参数时，你也可以在参数的前后都加上“__”（两个下划线），例如，使用__aligned__而不是aligned，这样，你就可以在相应的头文件里使用它而不用关心头文件里是否有重名的宏定义。</em></p>
<h1 id="函数属性"><a href="#函数属性" class="headerlink" title="函数属性"></a>函数属性</h1><p>函数属性可以帮助开发者把一些特性添加到函数声明中，从而可以使编译器在错误检查方面的功能更强大。</p>
<p>GNU CC需要使用 –Wall，这是控制警告信息的一个很好的方式。</p>
<p>下面是常见的属性参数：</p>
<table>
<thead>
<tr>
<th align="left">参数名</th>
<th align="center">语法格式</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">noreturn</td>
<td align="center">noreturn</td>
<td align="left">该属性通知编译器函数从不返回值。<br>当遇到函数需要返回值却还没运行到返回值处就已退出来的情况，该属性可以避免出现错误信息。<br>C库函数中的abort（）和exit（）的声明格式就采用了这种格式：<br>   (1) extern void  exit(int)   <strong>attribute</strong>( ( noreturn ) );<br>   (2) extern void  abort(void)  <strong>attribute</strong>( ( noreturn ) );</td>
</tr>
<tr>
<td align="left">noinline</td>
<td align="center">noinline</td>
<td align="left">用inline修饰的函数能否形成内联，需要看编译器对该函数定义的具体处理。该参数表示：不内联</td>
</tr>
<tr>
<td align="left">always_inline</td>
<td align="center">always_inline</td>
<td align="left">总是内联</td>
</tr>
<tr>
<td align="left">const</td>
<td align="center">const</td>
<td align="left">该属性只能用于带有数值类型参数的函数上，当重复调用带有数值参数的函数时，由于返回值是相同的。所以此时编译器可以进行优化处理，除第一次需要运算外， 其它只需要返回第一次的结果。<br> <em><strong>const参数不能用在带有指针类型参数的函数中，因为该属性不但影响函数的参数值，同样也影响到了参数指向的数据，它可能会对代码本身产生严重甚至是不可恢复的严重后果。</strong></em></td>
</tr>
<tr>
<td align="left">format</td>
<td align="center">format (archetype, string-index, first-to-check)</td>
<td align="left">该属性可以给被声明的函数加上类似printf或者scanf的特征，它可以使编译器检查函数声明和函数实际调用参数之间的格式化字符串是否匹配。<br>format属性告诉编译器，按照 printf, scanf, strftime或strfmon的参数表格式规则对该函数的参数进行检查。<br>“archetype”指定是哪种风格；<br>“string-index”指定传入函数的第几个参数是格式化字符串；<br>“first-to-check”指定第一个可变参数所在的索引。</td>
</tr>
<tr>
<td align="left">finstrument-functions</td>
<td align="center">finstrument-functions</td>
<td align="left">该参数可以使程序在编译时，在函数的入口和出口处生成instrumentation调用。增加的这两个函数分别为：<br> <code>void __cyg_profile_func_enter (void *this_fn, void *call_site);</code> <br> <code>void __cyg_profile_func_exit  (void *this_fn, void *call_site);</code><br>其中第一个参数为当前函数的起始地址，第二个参数为返回地址，即caller函数中的地址。</td>
</tr>
<tr>
<td align="left">no_instrument_function</td>
<td align="center">no_instrument_function</td>
<td align="left">gcc加上“-finstrument-functions”选项用来跟踪函数的调用关系，在每个函数的入口和出口处会各增加一个额外的hook函数的调用。如果不想跟踪某个函数，可以给该函数指定“no_instrument_function”属性。</td>
</tr>
<tr>
<td align="left">constructor</td>
<td align="center">constructor/constructor(n)</td>
<td align="left">若函数被设定为constructor属性，则该函数会在 main（）函数执行之前被自动的执行。<br>n表示当存在多个被修饰的函数时，执行的优先级顺序，如果没设置n，则执行顺序不确定，其中[0,100]是系统保留的,不可以调用。数值越小,越先调用。<br><em><strong>执行顺序为:load-&gt;constructor-&gt;main，因为：dyld（动态链接器，程序的最初起点）在加载 image（可以理解成 Mach-O 文件）时会先通知 objc runtime 去加载其中所有的类，每加载一个类时，它的 +load 随之调用，全部加载完成后，dyld 才会调用这个 image 中所有的 constructor 方法,然后才调用main函数.</strong></em></td>
</tr>
<tr>
<td align="left">destructor</td>
<td align="center">destructor/destructor(n)</td>
<td align="left">与constructor相似，若函数被设定为destructor属性，则该函数会在main（）函数执行之后或者exit（）被调用后被自动的执行。<br>  拥有此类属性的函数经常隐式的用在程序的初始化数据方面。数值越大,越先调用</td>
</tr>
<tr>
<td align="left">unavailable</td>
<td align="center">unavailable(“错误信息”)</td>
<td align="left">适用于方法、属性。告诉编译器不可用。如果使用了，就会编译失败，提示错误信息</td>
</tr>
<tr>
<td align="left">deprecated</td>
<td align="center">deprecated(“警告信息”)</td>
<td align="left">适用于方法、属性。告诉编译器已经过时，如果使用了，会报过时警告</td>
</tr>
<tr>
<td align="left">nonnull</td>
<td align="center">nonnull(int,int,…)</td>
<td align="left">编译器对函数参数进行NULL的检查,参数类型必须是指针类型(包括对象)</td>
</tr>
<tr>
<td align="left">visibility</td>
<td align="center">visibility(“visibilityType”)</td>
<td align="left">该关键字与gcc编译参数-fvisibility=hidden配合使用。<br>visibility_type 是下列值之一：<br>  <strong>default</strong>:先使用-fvisibility=hidden将所有符号隐藏，然后在需要对外的符号前添加__attribute__((visibility(“default”)))属性来保证符号对外可见;<br>  <strong>hidden</strong>:该符号不存放在动态符号表中，因此，其他可执行文件或共享库都无法直接引用它。使用函数指针可进行间接引用。将-fvisibility设置为”default”或不设置这个属性，默认所有符号都对外可见，然后在不对外可见的函数或变量前添加__attribute__((visibility(“hidden”)))来隐藏该符号。<br>  <strong>internal</strong>:除非由特定于处理器的应用二进制接口 (psABI) 指定，否则，内部可见性意味着不允许从另一模块调用该函数;<br>  <strong>protected</strong>:该符号存放在动态符号表中，但定义模块内的引用将与局部符号绑定。也就是说，另一模块无法覆盖该符号。</td>
</tr>
</tbody></table>
<h2 id="同时使用多个参数"><a href="#同时使用多个参数" class="headerlink" title="同时使用多个参数"></a>同时使用多个参数</h2><p>可以在同一个函数声明里使用多个__attribute__。使用方式上，你可以选择两个单独的__attribute__，或者把它们写在一起，比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">extern void  die(const char *format， ...)   __attribute__( (noreturn))   __attribute__((format(printf, 1, 2)) );</span><br></pre></td></tr></table></figure>
<p>或者:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">extern void  die(const char *format，...)    __attribute __( (noreturn,  format(printf, 1, 2)) );</span><br></pre></td></tr></table></figure>
<p>如果带有该属性的自定义函数被追加到库的头文件里，那么所以调用该函数的程序都要做相应的检查。</p>
<p>需要说明的是，__attribute__适用于函数的声明而不是函数的定义。所以，当需要使用该属性的函数时，必须在同一个文件里进行声明，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* 函数声明 *&#x2F;</span><br><span class="line"></span><br><span class="line">void die( const char *format， ... ) __attribute __( (noreturn) ) __attribute __( ( format(printf，1，2) ) );</span><br><span class="line"></span><br><span class="line">void die( const char *format，... )</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">   &#x2F;* 函数定义 *&#x2F;  </span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="变量属性"><a href="#变量属性" class="headerlink" title="变量属性"></a>变量属性</h1><p>关键字__attribute__也可以对变量（variable）或结构体成员（structure field）进行属性设置。</p>
<p>下面是常见的属性参数：</p>
<table>
<thead>
<tr>
<th align="left">参数名</th>
<th align="center">语法格式</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">aligned</td>
<td align="center">aligned(n)</td>
<td align="left">让所作用的结构成员对齐在n字节自然边界上。如果结构中有成员的长度大于n，则按照最大成员的长度来对齐。<br> <em><strong>aligned后面必须跟2的次幂，其他的编译器报错。当我们传入1和2的时候，编译器模式都是以4字节对齐的，且只有结构体上下两个字段是char类型的才会将其合并处理</strong></em></td>
</tr>
<tr>
<td align="left">packed</td>
<td align="center">packed</td>
<td align="left">用packed修饰后,变为1字节对齐,这个常用于与协议有关的网络传输中.</td>
</tr>
<tr>
<td align="left">cleanup</td>
<td align="center">cleanup(func)</td>
<td align="left">声明到一个变量上，当这个变量作用域结束时，调用指定的一个函数。<br>   指定的函数传递的参数是变量的地址;<br>   当作用域内有多个cleanup的变量时,遵守先入后出的栈式结构。<br><em><strong>cleanup的执行先于dealloc</strong></em></td>
</tr>
</tbody></table>
<h1 id="类型属性"><a href="#类型属性" class="headerlink" title="类型属性"></a>类型属性</h1><p>关键字__attribute__也可以对结构体（struct）或共用体（union）进行属性设置。</p>
<p>下面是常见的属性参数：</p>
<table>
<thead>
<tr>
<th align="left">参数名</th>
<th align="center">语法格式</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">aligned</td>
<td align="center">aligned(n)</td>
<td align="left">让所作用的结构成员对齐在n字节自然边界上。如果结构中有成员的长度大于n，则按照最大成员的长度来对齐。<br> <em><strong>aligned后面必须跟2的次幂，其他的编译器报错。当我们传入1和2的时候，编译器模式都是以4字节对齐的，且只有结构体上下两个字段是char类型的才会将其合并处理</strong></em></td>
</tr>
<tr>
<td align="left">packed</td>
<td align="center">packed</td>
<td align="left">用packed修饰后,变为1字节对齐,这个常用于与协议有关的网络传输中.</td>
</tr>
<tr>
<td align="left">deprecated</td>
<td align="center">deprecated(“警告信息”)</td>
<td align="left">适用于方法、属性。告诉编译器已经过时，如果使用了，会报过时警告</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
</search>
