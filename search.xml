<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Redis的主从复制</title>
    <url>/2021/03/24/Redis%E7%9A%84%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>内存溢出</title>
    <url>/2021/03/24/%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>断言Assert</title>
    <url>/2021/03/24/%E6%96%AD%E8%A8%80Assert/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近在对公司某项目进行代码评审的过程中，发现了断言机制使用不正确的问题。所以来记个笔记以避免自已以及看见这篇文章的同学们踩坑。</p>
<h3 id="断言机制"><a href="#断言机制" class="headerlink" title="断言机制"></a>断言机制</h3><p>程序一般分为“Debug”版和“Release”版，而断言一般是用于内部调试版，用于检查“不应该存在”的情况。</p>
<p>C和C++的断言机制一般通过调用assert()函数；<br>java类似的断言函数assert需要在断言开关-enableassertions或-ea开启的时候才起作用。为了避免与jdk14之前的assert关键字冲突，所以该开关默认是关闭的。</p>
<h3 id="C-的assert"><a href="#C-的assert" class="headerlink" title="C++的assert"></a>C++的assert</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">assert</span><span class="params">(<span class="keyword">int</span> expression)</span></span>;</span><br></pre></td></tr></table></figure>
<p>c++的assert本质是一个宏，原型定义在&lt;assert.h&gt;中。原理是判断表达式expression的值是否为0，如果为0，先向stderr打印一条Error信息，然后调用abort来终止进程。</p>
<h3 id="java的assert"><a href="#java的assert" class="headerlink" title="java的assert"></a>java的assert</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">//有两种表示方式</span><br><span class="line"><span class="keyword">assert</span> <span class="type">bool</span>表达式  //当<span class="type">bool</span>表达式为<span class="keyword">false</span>的时候抛出AssertionError，并终止执行</span><br><span class="line"><span class="keyword">assert</span> <span class="type">bool</span>表达式：错误信息 //当<span class="type">bool</span>表达式为<span class="keyword">false</span>的时候抛出AssertionError，输出错误信息，并终止执行</span><br></pre></td></tr></table></figure>
<p><em>注意：java的大部分IDEA都默认assert机制是关闭的，需要手动java -ea打开开关</em></p>
<h3 id="assert的思考"><a href="#assert的思考" class="headerlink" title="assert的思考"></a>assert的思考</h3><p>因为在本次代码评审的过程中，发现了assert使用的两个问题：</p>
<ol>
<li>assert误用：<br> <br>在有些地方，assert被当作if滥用误用。比如一个祖先进程在创建进程时，如果参数读取失败，本来该走的代码逻辑是放弃该进程的创建，向上报异常或者输出Error信息。而该处使用assert直接导致整个程序异常终止。</li>
<li>冗余代码：<br> <br>在c++中如果assert的表达式返回的值是false，那么进程会调用abort终止并退出。因为对这一原理可能不是特别了解，所以评审的代码里出现了： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">assert(expression);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">terminate</span>(); </span><br></pre></td></tr></table></figure>
 terminate定义在<exception>中，用于处理异常情况的，其默认实现是调用abort()。所以上面的代码，看出什么问题了么？</exception></li>
</ol>
<p>根据发现的问题以及个人平时的经验，我对assert的使用有以下几点建议：</p>
<ol>
<li>使用 assert() 时，被检测的表达式最好不要太复杂，最好的方式是一次断言只对应一个表达式。这样有助于在Debug调试的时候快速进行问题定位。</li>
<li>不要用会改变环境的语句作为断言的表达式，例如： <figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title"><span class="built_in">assert</span></span>(<span class="variable">i</span>++);</span></span><br></pre></td></tr></table></figure>
在Debug模式下，i的值会进行自增，但是切换到Release版本下，因为assert失效，所以i的值不会改变，可能会造成程序逻辑异常，比如：死循环等。因此，应该改为： <figure class="highlight css"><table><tr><td class="code"><pre><span class="line">assert(<span class="selector-tag">i</span>);</span><br><span class="line"><span class="selector-tag">i</span>++;</span><br></pre></td></tr></table></figure></li>
<li>如果是java语言，可以优先使用IDEA的debug调试或者Junit。因为assert的开关默认是关闭的，手动修改开关并不是在什么场合下都可以的，比如对于部署在容器里的Web程序来说就不是很方便。但是注意assert与Junit的判断出发点还是不同的，不能完全替代。前者是用于代码中逻辑条件点的判断，而后者是单元测试。</li>
</ol>
]]></content>
      <categories>
        <category>java、C++</category>
      </categories>
  </entry>
  <entry>
    <title>java.nio.bytebuffer解析</title>
    <url>/2021/03/23/java-nio-bytebuffer%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<p>ByteBuffer继承自抽象类Buffer，用于在堆内存中预留一部分空间对IO数据做临时存储，以提高读写效率。与CharBuffer、IntBuffer等Buffer的其他子类的<br>区别在于数据类型的不同，但是关于缓冲区读写区域的管理全部由父类Buffer负责。<br><br> ByteBuffer类的定义：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="symbol">ByteBuffer</span></span><br><span class="line"><span class="symbol">extends</span> <span class="symbol">Buffer</span></span><br><span class="line"><span class="symbol">implements</span> <span class="symbol">Comparable</span>&lt;<span class="symbol">ByteBuffer</span>&gt;</span><br></pre></td></tr></table></figure>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>ByteBuffer自定义的属性字段：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">** 不为空，仅用于JVM堆缓存区  */</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">byte</span>[] hb;                  <span class="comment">// Non-null only for heap buffers</span></span><br><span class="line"><span class="comment">/** 数组的偏移量 */</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> offset;</span><br><span class="line"><span class="comment">/** 是否只读 */</span></span><br><span class="line"><span class="keyword">boolean</span> isReadOnly;   </span><br><span class="line"><span class="comment">/** 是否采用默认排序：默认为大端序，为false时是小端序*/</span></span><br><span class="line"><span class="keyword">boolean</span> bigEndian = <span class="literal">true</span>;                                   <span class="comment">// package-private</span></span><br><span class="line"><span class="comment">// 本缓存的字节数据排列的顺序</span></span><br><span class="line"><span class="keyword">boolean</span> nativeByteOrder = (Bits.byteOrder() == ByteOrder.BIG_ENDIAN);<span class="comment">// package-private</span></span><br></pre></td></tr></table></figure>
<p>继承自父类Buffer的属性字段：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Buffer本质上是一个数组，它是通过下面的属性来实现工作区域上数据的读写管理的。</span></span><br><span class="line"><span class="comment">// Invariants: mark &lt;= position &lt;= limit &lt;= capacity</span></span><br><span class="line"><span class="comment">// 保存某个时刻的position指针的值，通过调用mark()实现可以与reset()函数搭配使用；当mark被置为负值时，表示废弃标记。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> mark = <span class="number">-1</span>;</span><br><span class="line"><span class="comment">// 缓冲区下一个可读/可写的元素的位置</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> <span class="built_in">position</span> = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 表示代操作数据的界限，limit-position=remaining</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> limit;</span><br><span class="line"><span class="comment">// 表示缓冲空间的总容量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br></pre></td></tr></table></figure>
<h2 id="成员函数"><a href="#成员函数" class="headerlink" title="成员函数"></a>成员函数</h2><ol>
<li>因为Buffer的本质是一个数组，所以在使用Buffer之前需要为其分配内存空间。ByteBuffer的创建可以通过分配内存空间或者将现有的字节数组包装到缓冲区中：</li>
</ol>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//直接分配内存，与操作系统的耦合性更高，速度更快，但是分配的开销更大</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title">allocateDirect</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DirectByteBuffer(capacity);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在java堆上分配内存</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title">allocate</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (capacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HeapByteBuffer(capacity, capacity);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将array从offset开始的length长的subArray包装到缓冲区buffer中，buffer的position等于offset，limit=offset+length</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title">wrap</span><span class="params">(<span class="keyword">byte</span>[] <span class="built_in">array</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HeapByteBuffer(<span class="built_in">array</span>, offset, length);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException x) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将array数组包装到缓冲区，数组和butebuffer的任意一方存在改动都会互相影响</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title">wrap</span><span class="params">(<span class="keyword">byte</span>[] <span class="built_in">array</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> wrap(<span class="built_in">array</span>, <span class="number">0</span>, <span class="built_in">array</span>.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em><strong>ByteBuffer.warp(byte[])以一个数组创建buffer后，该buffer默认处于读模式，即position=0,limit=capacity。此时若使用put进行写入，将从0位置开始覆盖掉初始化数组的数据。因此，若初始化的数据是有用数据，在写入开始前应使用compact()压实后，从尾部开始写入。</strong></em></p>
<ol start="2">
<li>缓冲区数据的读写<br>Buffer的工作方式主要为向缓冲区写入数据或者从缓冲区读取数据。<br><br>Buffer的缓冲区长度capacity在初始化之后就是不可修改的，只能通过position与limit划分活动区域。<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取活动区域的数据长度</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">remaining</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rem = limit - <span class="built_in">position</span>;</span><br><span class="line">    <span class="keyword">return</span> rem &gt; <span class="number">0</span> ? rem : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断该缓冲区是否还存在活动区域</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasRemaining</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">position</span> &lt; limit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>缓冲区数据的读写方法：<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 相对位置读，读取的字节是该缓冲区的当前position，读完后，position+1</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> abstract <span class="keyword">byte</span> <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 相对位置写，写入的字节是该缓冲区的当前position，写完后，position+1</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> abstract ByteBuffer <span class="title">put</span><span class="params">(<span class="keyword">byte</span> b)</span></span>;</span><br><span class="line"><span class="comment">// 绝对位置读（绝对位置的读写是不会修改positon的值的）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> abstract <span class="keyword">byte</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"><span class="comment">// 绝对位置写</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> abstract ByteBuffer <span class="title">put</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">byte</span> b)</span></span>;</span><br><span class="line"><span class="comment">// 相对位置读取大块量数据到数组中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ByteBuffer <span class="title">get</span><span class="params">(<span class="keyword">byte</span>[] dst, <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    checkBounds(offset, length, dst.length);</span><br><span class="line">    <span class="keyword">if</span> (length &gt; remaining())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BufferUnderflowException();</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">end</span> = offset + length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = offset; i &lt; <span class="built_in">end</span>; i++)</span><br><span class="line">        dst[i] = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> ByteBuffer <span class="title">get</span><span class="params">(<span class="keyword">byte</span>[] dst)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">get</span>(dst, <span class="number">0</span>, dst.length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 相对位置写入大批量数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ByteBuffer <span class="title">put</span><span class="params">(ByteBuffer src)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (src == <span class="keyword">this</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="keyword">if</span> (isReadOnly())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ReadOnlyBufferException();</span><br><span class="line">    <span class="keyword">int</span> n = src.remaining();</span><br><span class="line">    <span class="keyword">if</span> (n &gt; remaining())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BufferOverflowException();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">put</span>(src.<span class="built_in">get</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> ByteBuffer <span class="title">put</span><span class="params">(<span class="keyword">byte</span>[] src, <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    checkBounds(offset, length, src.length);</span><br><span class="line">    <span class="keyword">if</span> (length &gt; remaining())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BufferOverflowException();</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">end</span> = offset + length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = offset; i &lt; <span class="built_in">end</span>; i++)</span><br><span class="line">        <span class="keyword">this</span>.<span class="built_in">put</span>(src[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ByteBuffer <span class="title">put</span><span class="params">(<span class="keyword">byte</span>[] src)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">put</span>(src, <span class="number">0</span>, src.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
Buffer的类型包括了所有的除boolean外的基本数据类型。ByteBuffer可以通过调用asXXXBuffer()转换成XXX类型的Buffer，例如：<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 转换得到IntBuffer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="function">IntBuffer <span class="title">asIntBuffer</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 对应的还有IntBuffer响应的读写方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="function"><span class="keyword">int</span> <span class="title">getInt</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="function">ByteBuffer <span class="title">putInt</span><span class="params">(<span class="keyword">int</span> value)</span></span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="function"><span class="keyword">int</span> <span class="title">getInt</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="function">ByteBuffer <span class="title">putInt</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> value)</span></span>;</span><br></pre></td></tr></table></figure>
其他方法，一般在读写模式切换前会调用clear()、flip()、compact()等方法：<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 清空缓冲区，该方法并不会真的清除缓冲区的数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">position</span> = <span class="number">0</span>;</span><br><span class="line">    limit = capacity;</span><br><span class="line">    mark = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 翻转方法，向前反转活动区域，一般用于准备数据读取</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">flip</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    limit = <span class="built_in">position</span>;</span><br><span class="line">    <span class="built_in">position</span> = <span class="number">0</span>;</span><br><span class="line">    mark = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** The bytes between the buffer&#x27;s current position and its limit, if any, are copied to the beginning of the buffer. </span></span><br><span class="line"><span class="comment">* That is, the byte at index p = position() is copied to index zero, </span></span><br><span class="line"><span class="comment">*    the byte at index p + 1 is copied to index one, </span></span><br><span class="line"><span class="comment">*    and so forth until the byte at index limit() - 1 is copied to index n = limit() - 1 - p. </span></span><br><span class="line"><span class="comment">* The buffer&#x27;s position is then set to n+1 and its limit is set to its capacity. </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 向前压实“活动区域”，准备开始写入。将Buffer中剩余的数据区域移动到头部，再将“活动区域”设置为除数据区域外的末尾部分。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> abstract ByteBuffer <span class="title">compact</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>网络通信</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMQ解析二</title>
    <url>/2021/03/23/RocketMQ%E8%A7%A3%E6%9E%90%E4%BA%8C/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>进程创建与退出</title>
    <url>/2021/03/22/%E8%BF%9B%E7%A8%8B%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%80%80%E5%87%BA/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>最近在参与公司某项目平台组件代码评审的任务，刚好与操作系统的进程创建管理相关。于是，就想就着工作中发现的问题以及自己的一些总结来写点什么，既是复习又是学习。
</code></pre>
<h1 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h1><pre><code>老生常谈，各博客平台写烂了的东西。
</code></pre>
<h2 id="Linux系统特殊的进程"><a href="#Linux系统特殊的进程" class="headerlink" title="Linux系统特殊的进程"></a>Linux系统特殊的进程</h2><p>　　在Linux系统中，除了系统启动之后的第一个进程由系统来创建，其余的进程都必须由某个父进程来创建。</p>
<ul>
<li><p>0号进程：<br><br>　　在系统启动及完成初始化之后，Linux自动创建的进程叫做根进程。根进程是Linux中所有进程的祖宗，pid为0的Idle进程。这也是唯一一个不是由fork也不是由kernel_thread创建的进程。</p>
</li>
<li><p>1号进程init：<br><br>　　由Idle进程调用Kernel_thread创建一个内核线程去执行init函数，该内核线程即init进程，pid为1。init函数继续初始化，此时依旧共享父进程即0号进程的资源属性，直至init函数的最后调用系统的execve，以装入用户空间的可执行文件/sbin/init，此时进程pid1拥有自己的属性资源，且内核的初始化和启动过程结束。<br><br>　　<code>kernel_thread(kernel_init, NULL, CLONE_FS);</code><br><br>　　init进程是所有用户进程的祖先。</p>
</li>
<li><p>2号进程kthreadd：<br><br>　　由Idle进程调用Kernel_thread创建，运行在内核空间，负责所有内核进程的调度和管理，pid为2。<br><br>　　<code>pid = kernel_thread(kthreadd, NULL, CLONE_FS | CLONE_FILES);</code><br><br>　　会循环执行kthread函数，该函数的作用就是运行kthread_create_list全局链表中维护的kthread, 当我们调用kernel_thread创建的内核线程会被加入到此链表中。<br><br>　　该进程是所有内核进程的祖先。</p>
<h3 id="init与systemd"><a href="#init与systemd" class="headerlink" title="init与systemd"></a>init与systemd</h3><p>ubuntu9.10-14.10，系统的启动过程是：<br><br>　　　　开机自检BIOS====》加载MBR中的GRUB引导====》加载内核====》init进程初始化<br>之后，ubuntu对内核的初始化进行了改进，启动过程如下：<br><br>　　　　开机自检BIOS====》加载MBR中的GRUB2引导====》加载内核====》Systemd进程初始化</p>
<p>　　init进程与system进程的区别:</p>
<table>
<thead>
<tr>
<th align="left">init进程</th>
<th align="left">systemd进程</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><br>　　　1. init进程的启动时间长，进程的启动是串行执行的<br>　　　2. 启动脚本复杂，init进程只是执行启动脚本，不管其他事情，脚本需要自己处理各种情况<br>　　　3. 位于/sbin/init</td>
<td align="left"><br>　　　1. 按需启动服务，减少系统资源消耗<br>　　　2. 尽可能并行启动进程，减少系统启动等待时间<br>　　　3. 位于 /usr/lib/systemd/systemd</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="进程的创建"><a href="#进程的创建" class="headerlink" title="进程的创建"></a>进程的创建</h2><p>进程创建首先是在进程表中为进程建立一个进程控制块PCB。<br><br>PCB通常记载进程之相关信息，包括：</p>
<ul>
<li>进程状态：可以是new、ready、running、waiting或 blocked等。</li>
<li>程序计数器：下一条要运行的指令地址。</li>
<li>CPU寄存器：如累加器、变址寄存器、堆栈指针以及一般用途寄存器、状况代码等，</li>
<li>CPU调度算法：优先级、调度队列等指针以及其他参数。</li>
<li>存储器管理：如标签页表等。</li>
<li>输入输出状态：配置进程使用I/O设备，如磁带机等</li>
</ul>
<p>在 Linux 内核中,供用户创建进程的API调用有fork()，vfork()，clone() ，这三个函数的对应的系统调用是：sys_fork()、sys_clone()、sys_vfork()。<br>fork、vfork以及 clone 的区别：</p>
<table>
<thead>
<tr>
<th align="left">参数名</th>
<th align="left">语法格式</th>
</tr>
</thead>
<tbody><tr>
<td align="left">fork</td>
<td align="left">fork创造的子进程是父进程的完整副本，复制了父进程的资源: task_struct,打开文件表，信号，命名空间虚拟地址空间（包括堆栈等）等。（写时复制） <br>fork的实现：do_fork(CLONE_SIGCHLD,…)</td>
</tr>
<tr>
<td align="left">vfork</td>
<td align="left">vfork创建的子进程与父进程共享虚拟地址空间，所以子进程的改变会影响父进程中的数据。vfork创建子进程后，父进程会被阻塞直到子进程调用exec或exit。  <br>vfork的实现：do_fork(CLONE_VFORK</td>
</tr>
<tr>
<td align="left">clone</td>
<td align="left">系统调用fork()和vfork()是无参数的，而clone()则带有参数。fork()是全部复制，vfork()是共享内存，而clone()是则可以将父进程资源有选择地复制给子进程。<br>具体要复制哪些资源给子进程，由参数列表中的clone_flags决决定。<br>clone的实现：do_fork(CLONE_VM/CLONE_FS/CLONE_FILES/CLONE_SIGCHLD,…)</td>
</tr>
</tbody></table>
<p>fork与vfork都是由clone实现，底层是调用了内核的_do_fork函数。</p>
<h3 id="fork详解"><a href="#fork详解" class="headerlink" title="fork详解"></a>fork详解</h3><ol>
<li><p>写时复制：在fork之后exec之前两个进程用的是相同的物理空间（内存区），子进程的代码段、数据段、堆栈都是指向父进程的物理空间，也就是说，两者的虚拟空间不同，但其对应的物理空间是同一个。<br>当父子进程中有更改相应段的行为发生时，再为子进程相应的段分配物理空间，如果不是因为exec，内核会给子进程的数据段、堆栈段分配相应的物理空间（至此两者有各自的进程空间，互不影响），而代码段继续共享父进程的物理空间（两者的代码完全相同）。而如果是因为exec，由于两者执行的代码不同，子进程的代码段也会分配单独的物理空间。</p>
<br>
因为当fork()后立即执行exec()，地址空间就无需被复制了。fork()的实际开销就是复制父进程的页表以及给子进程创建一个进程描述符。在一般情况下，进程创建后都为马上运行一个可执行的文件，这种优化，可以避免拷贝大量根本就不会被使用的数据(地址空间里常常包含数十兆的数据)。
***<br>而vfork是连虚拟内存空间都不会创建，直接共享父进程的虚拟空间，即共享父进程的物理空间。***</li>
<li><p>fork的另一个特性是所有由父进程打开的描述符都被复制到子进程中。父、子进程中相同编号的文件描述符在内核中指向同一个file结构体，也就是说，file结构体的引用计数要增加。</p>
</li>
<li><p>fork创建进程失败返回-1，如果是子进程返回值为0，如果是父进程则返回子进程的pid。一个进程要执行一个不同的程序。比如fork后，子进程调用exec函数</p>
</li>
</ol>
<h2 id="进程终止"><a href="#进程终止" class="headerlink" title="进程终止"></a>进程终止</h2><p>当进程完成执行最后指令并且通过系统调用 exit() 向操作系统发出请求时，进程终止。这时，进程可以返回退出状态码（通常为整数）给父进程。所有进程资源，如物理和虚拟内存、打开文件和 I/O 缓冲区等，会由操作系统释放。</p>
<p>父进程需要通过调用wait()或者waitpid函数来收集子进程的退出状态。如果父进程未调用该函数来阻塞获取子进程的退出状态，那么子进程就是僵尸进程，会对系统造成危害。<br><br>这是因为即使进程退出时，操作系统会释放其占用的资源，但是它位于进程表中的项还是存在的，需要由父进程进行处理。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">pid_t</span> <span class="title">waitpid</span><span class="params">(<span class="keyword">pid_t</span> pid,<span class="keyword">int</span> *status,<span class="keyword">int</span> options)</span></span>;</span><br></pre></td></tr></table></figure>

<p>其中：</p>
<ol>
<li>参数pid为欲等待的子进程识别码：</li>
</ol>
<table>
<thead>
<tr>
<th align="left">参数值</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">pid&lt;-1</td>
<td align="left">等待进程组号为pid绝对值的任何子进程。</td>
</tr>
<tr>
<td align="left">pid=-1</td>
<td align="left">等待任何子进程，此时的waitpid()函数就退化成了普通的wait()函数。</td>
</tr>
<tr>
<td align="left">pid=0</td>
<td align="left">等待进程组号与目前进程相同的任何子进程，也就是说任何和调用waitpid()函数的进程在同一个进程组的进程。</td>
</tr>
<tr>
<td align="left">pid&gt;0</td>
<td align="left">等待进程号为pid的子进程。</td>
</tr>
</tbody></table>
<p>pid为0与-1的区别在于：前者是收集所有子进程的退出状态码而后者是收集属于同一个进程组的子进程的退出状态码。父进程的子进程不一定与父进程或者其他兄弟进程同属于一个进程组。</p>
<ol start="2">
<li>而参数*status将保存子进程的状态信息，有了这个信息父进程就可以了解子进程是否正常退出。</li>
</ol>
<table>
<thead>
<tr>
<th align="left">宏</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">WIFEXITED(status)</td>
<td align="left">如果子进程正常结束，它就返回真；否则返回假。</td>
</tr>
<tr>
<td align="left">WEXITSTATUS(status)</td>
<td align="left">如果WIFEXITED(status)为真，则可以用该宏取得子进程exit()返回的结束代码。</td>
</tr>
<tr>
<td align="left">WIFSIGNALED(status)</td>
<td align="left">如果子进程因为一个未捕获的信号而终止，它就返回真；否则返回假。</td>
</tr>
<tr>
<td align="left">WTERMSIG(status)</td>
<td align="left">如果WIFSIGNALED(status)为真，则可以用该宏获得导致子进程终止的信号代码。</td>
</tr>
<tr>
<td align="left">WIFSTOPPED(status)</td>
<td align="left">如果当前子进程被暂停了，则返回真；否则返回假。</td>
</tr>
<tr>
<td align="left">WSTOPSIG(status)</td>
<td align="left">如果WIFSTOPPED(status)为真，则可以使用该宏获得导致子进程暂停的信号代码。</td>
</tr>
</tbody></table>
<ol start="3">
<li>参数options提供了一些另外的选项来控制waitpid()函数的行为。如果不想使用这些选项，则可以把这个参数设为0</li>
</ol>
<p>如果在调用waitpid()函数时，当指定等待的子进程已经停止运行或结束了，则waitpid()会立即返回；但是如果子进程还没有停止运行或结束，则调用waitpid()函数的父进程则会被阻塞，暂停运行。如果waitpid()函数执行成功，则返回子进程的进程号；如果有错误发生，则返回-1，并且将失败的原因存放在errno变量中。</p>
]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>C++学习之__attribute__机制</title>
    <url>/2021/03/17/C-%E5%AD%A6%E4%B9%A0%E4%B9%8B-attribute/</url>
    <content><![CDATA[<p>__attribute__是GNU C特色之一，可以设置函数属性（Function Attribute ）、变量属性（Variable Attribute ）和类型属性（Type Attribute)等.</p>
<p>语法格式： __attribute __((abute-list))</p>
<p>位置：声明结束符“；”的前面</p>
<p><em>在使用__attribute__参数时，你也可以在参数的前后都加上“__”（两个下划线），例如，使用__aligned__而不是aligned，这样，你就可以在相应的头文件里使用它而不用关心头文件里是否有重名的宏定义。</em></p>
<h1 id="函数属性"><a href="#函数属性" class="headerlink" title="函数属性"></a>函数属性</h1><p>函数属性可以帮助开发者把一些特性添加到函数声明中，从而可以使编译器在错误检查方面的功能更强大。</p>
<p>GNU CC需要使用 –Wall，这是控制警告信息的一个很好的方式。</p>
<p>下面是常见的属性参数：</p>
<table>
<thead>
<tr>
<th align="left">参数名</th>
<th align="center">语法格式</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">noreturn</td>
<td align="center">noreturn</td>
<td align="left">该属性通知编译器函数从不返回值。<br>当遇到函数需要返回值却还没运行到返回值处就已退出来的情况，该属性可以避免出现错误信息。<br>C库函数中的abort（）和exit（）的声明格式就采用了这种格式：<br>   (1) extern void  exit(int)   <strong>attribute</strong>( ( noreturn ) );<br>   (2) extern void  abort(void)  <strong>attribute</strong>( ( noreturn ) );</td>
</tr>
<tr>
<td align="left">noinline</td>
<td align="center">noinline</td>
<td align="left">用inline修饰的函数能否形成内联，需要看编译器对该函数定义的具体处理。该参数表示：不内联</td>
</tr>
<tr>
<td align="left">always_inline</td>
<td align="center">always_inline</td>
<td align="left">总是内联</td>
</tr>
<tr>
<td align="left">const</td>
<td align="center">const</td>
<td align="left">该属性只能用于带有数值类型参数的函数上，当重复调用带有数值参数的函数时，由于返回值是相同的。所以此时编译器可以进行优化处理，除第一次需要运算外， 其它只需要返回第一次的结果。<br> <em><strong>const参数不能用在带有指针类型参数的函数中，因为该属性不但影响函数的参数值，同样也影响到了参数指向的数据，它可能会对代码本身产生严重甚至是不可恢复的严重后果。</strong></em></td>
</tr>
<tr>
<td align="left">format</td>
<td align="center">format (archetype, string-index, first-to-check)</td>
<td align="left">该属性可以给被声明的函数加上类似printf或者scanf的特征，它可以使编译器检查函数声明和函数实际调用参数之间的格式化字符串是否匹配。<br>format属性告诉编译器，按照 printf, scanf, strftime或strfmon的参数表格式规则对该函数的参数进行检查。<br>“archetype”指定是哪种风格；<br>“string-index”指定传入函数的第几个参数是格式化字符串；<br>“first-to-check”指定第一个可变参数所在的索引。</td>
</tr>
<tr>
<td align="left">finstrument-functions</td>
<td align="center">finstrument-functions</td>
<td align="left">该参数可以使程序在编译时，在函数的入口和出口处生成instrumentation调用。增加的这两个函数分别为：<br> <code>void __cyg_profile_func_enter (void *this_fn, void *call_site);</code> <br> <code>void __cyg_profile_func_exit  (void *this_fn, void *call_site);</code><br>其中第一个参数为当前函数的起始地址，第二个参数为返回地址，即caller函数中的地址。</td>
</tr>
<tr>
<td align="left">no_instrument_function</td>
<td align="center">no_instrument_function</td>
<td align="left">gcc加上“-finstrument-functions”选项用来跟踪函数的调用关系，在每个函数的入口和出口处会各增加一个额外的hook函数的调用。如果不想跟踪某个函数，可以给该函数指定“no_instrument_function”属性。</td>
</tr>
<tr>
<td align="left">constructor</td>
<td align="center">constructor/constructor(n)</td>
<td align="left">若函数被设定为constructor属性，则该函数会在 main（）函数执行之前被自动的执行。<br>n表示当存在多个被修饰的函数时，执行的优先级顺序，如果没设置n，则执行顺序不确定，其中[0,100]是系统保留的,不可以调用。数值越小,越先调用。<br><em><strong>执行顺序为:load-&gt;constructor-&gt;main，因为：dyld（动态链接器，程序的最初起点）在加载 image（可以理解成 Mach-O 文件）时会先通知 objc runtime 去加载其中所有的类，每加载一个类时，它的 +load 随之调用，全部加载完成后，dyld 才会调用这个 image 中所有的 constructor 方法,然后才调用main函数.</strong></em></td>
</tr>
<tr>
<td align="left">destructor</td>
<td align="center">destructor/destructor(n)</td>
<td align="left">与constructor相似，若函数被设定为destructor属性，则该函数会在main（）函数执行之后或者exit（）被调用后被自动的执行。<br>  拥有此类属性的函数经常隐式的用在程序的初始化数据方面。数值越大,越先调用</td>
</tr>
<tr>
<td align="left">unavailable</td>
<td align="center">unavailable(“错误信息”)</td>
<td align="left">适用于方法、属性。告诉编译器不可用。如果使用了，就会编译失败，提示错误信息</td>
</tr>
<tr>
<td align="left">deprecated</td>
<td align="center">deprecated(“警告信息”)</td>
<td align="left">适用于方法、属性。告诉编译器已经过时，如果使用了，会报过时警告</td>
</tr>
<tr>
<td align="left">nonnull</td>
<td align="center">nonnull(int,int,…)</td>
<td align="left">编译器对函数参数进行NULL的检查,参数类型必须是指针类型(包括对象)</td>
</tr>
<tr>
<td align="left">visibility</td>
<td align="center">visibility(“visibilityType”)</td>
<td align="left">该关键字与gcc编译参数-fvisibility=hidden配合使用。<br>visibility_type 是下列值之一：<br>  <strong>default</strong>:先使用-fvisibility=hidden将所有符号隐藏，然后在需要对外的符号前添加__attribute__((visibility(“default”)))属性来保证符号对外可见;<br>  <strong>hidden</strong>:该符号不存放在动态符号表中，因此，其他可执行文件或共享库都无法直接引用它。使用函数指针可进行间接引用。将-fvisibility设置为”default”或不设置这个属性，默认所有符号都对外可见，然后在不对外可见的函数或变量前添加__attribute__((visibility(“hidden”)))来隐藏该符号。<br>  <strong>internal</strong>:除非由特定于处理器的应用二进制接口 (psABI) 指定，否则，内部可见性意味着不允许从另一模块调用该函数;<br>  <strong>protected</strong>:该符号存放在动态符号表中，但定义模块内的引用将与局部符号绑定。也就是说，另一模块无法覆盖该符号。</td>
</tr>
</tbody></table>
<h2 id="同时使用多个参数"><a href="#同时使用多个参数" class="headerlink" title="同时使用多个参数"></a>同时使用多个参数</h2><p>可以在同一个函数声明里使用多个__attribute__。使用方式上，你可以选择两个单独的__attribute__，或者把它们写在一起，比如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span>  <span class="title">die</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *format， ...)</span>   __<span class="title">attribute__</span><span class="params">( (noreturn))</span>   __<span class="title">attribute__</span><span class="params">((format(<span class="built_in">printf</span>, <span class="number">1</span>, <span class="number">2</span>)) )</span></span>;</span><br></pre></td></tr></table></figure>
<p>或者:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span>  <span class="title">die</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *format，...)</span>    __attribute __<span class="params">( (noreturn,  format(<span class="built_in">printf</span>, <span class="number">1</span>, <span class="number">2</span>)) )</span></span>;</span><br></pre></td></tr></table></figure>
<p>如果带有该属性的自定义函数被追加到库的头文件里，那么所以调用该函数的程序都要做相应的检查。</p>
<p>需要说明的是，__attribute__适用于函数的声明而不是函数的定义。所以，当需要使用该属性的函数时，必须在同一个文件里进行声明，例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 函数声明 */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">die</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> *format， ... )</span> __attribute __<span class="params">( (noreturn) )</span> __attribute __<span class="params">( ( format(<span class="built_in">printf</span>，<span class="number">1</span>，<span class="number">2</span>) ) )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">die</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> *format，... )</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 函数定义 */</span>  </span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="变量属性"><a href="#变量属性" class="headerlink" title="变量属性"></a>变量属性</h1><p>关键字__attribute__也可以对变量（variable）或结构体成员（structure field）进行属性设置。</p>
<p>下面是常见的属性参数：</p>
<table>
<thead>
<tr>
<th align="left">参数名</th>
<th align="center">语法格式</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">aligned</td>
<td align="center">aligned(n)</td>
<td align="left">让所作用的结构成员对齐在n字节自然边界上。如果结构中有成员的长度大于n，则按照最大成员的长度来对齐。<br> <em><strong>aligned后面必须跟2的次幂，其他的编译器报错。当我们传入1和2的时候，编译器模式都是以4字节对齐的，且只有结构体上下两个字段是char类型的才会将其合并处理</strong></em></td>
</tr>
<tr>
<td align="left">packed</td>
<td align="center">packed</td>
<td align="left">用packed修饰后,变为1字节对齐,这个常用于与协议有关的网络传输中.</td>
</tr>
<tr>
<td align="left">cleanup</td>
<td align="center">cleanup(func)</td>
<td align="left">声明到一个变量上，当这个变量作用域结束时，调用指定的一个函数。<br>   指定的函数传递的参数是变量的地址;<br>   当作用域内有多个cleanup的变量时,遵守先入后出的栈式结构。<br><em><strong>cleanup的执行先于dealloc</strong></em></td>
</tr>
</tbody></table>
<h1 id="类型属性"><a href="#类型属性" class="headerlink" title="类型属性"></a>类型属性</h1><p>关键字__attribute__也可以对结构体（struct）或共用体（union）进行属性设置。</p>
<p>下面是常见的属性参数：</p>
<table>
<thead>
<tr>
<th align="left">参数名</th>
<th align="center">语法格式</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">aligned</td>
<td align="center">aligned(n)</td>
<td align="left">让所作用的结构成员对齐在n字节自然边界上。如果结构中有成员的长度大于n，则按照最大成员的长度来对齐。<br> <em><strong>aligned后面必须跟2的次幂，其他的编译器报错。当我们传入1和2的时候，编译器模式都是以4字节对齐的，且只有结构体上下两个字段是char类型的才会将其合并处理</strong></em></td>
</tr>
<tr>
<td align="left">packed</td>
<td align="center">packed</td>
<td align="left">用packed修饰后,变为1字节对齐,这个常用于与协议有关的网络传输中.</td>
</tr>
<tr>
<td align="left">deprecated</td>
<td align="center">deprecated(“警告信息”)</td>
<td align="left">适用于方法、属性。告诉编译器已经过时，如果使用了，会报过时警告</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>RocketMQ源码解析之RemotingCommand</title>
    <url>/2021/03/11/RocketMQ%E4%B9%8BRemotingCommand/</url>
    <content><![CDATA[<p>rocketmq-remoting模块是RocketMQ消息队列中负责网络通信的模块，底层框架是依赖于Netty的。<br><br>为了实现客户端与服务器之间高效的数据请求与接收，RocketMQ自定义了通信协议。</p>
<h1 id="通信协议及编解码方式"><a href="#通信协议及编解码方式" class="headerlink" title="通信协议及编解码方式"></a>通信协议及编解码方式</h1><p>RemotingCommand这个类封装了消息消息传输过程中的所有数据内容，并负责消息的编码和解码操作。</p>
<h2 id="RocketMQ的消息格式"><a href="#RocketMQ的消息格式" class="headerlink" title="RocketMQ的消息格式"></a>RocketMQ的消息格式</h2><p>RocketMQ的一条消息包含四个部分：<br><img src="/2021/03/11/RocketMQ%E4%B9%8BRemotingCommand/%E6%B6%88%E6%81%AF%E6%A0%BC%E5%BC%8F.png" alt="消息格式.png"></p>
<ol>
<li>消息长度：消息的总长度，占4个字节</li>
<li>序列化类型&amp;消息头长度：占4个字节，第一个字节代表序列化类型，后三个字节为消息头的长度</li>
<li>消息头：RocketMQ定义的通用消息头数据加上不同请求或者响应的自定义字段</li>
<li>消息正文</li>
</ol>
<p>下面是RocketMQ官方定义的消息头的字段：</p>
<table>
<thead>
<tr>
<th>Header字段</th>
<th>类型</th>
<th>Request说明</th>
<th>Response说明</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td>int</td>
<td>请求操作码，应答方根据不同的请求码进行不同的业务处理</td>
<td>应答响应码。0表示成功，非0则表示各种错误</td>
</tr>
<tr>
<td>language</td>
<td>LanguageCode</td>
<td>请求方实现的语言</td>
<td>应答方实现的语言</td>
</tr>
<tr>
<td>version</td>
<td>int</td>
<td>请求方程序的版本</td>
<td>应答方程序的版本</td>
</tr>
<tr>
<td>opaque</td>
<td>int</td>
<td>相当于requestId，在同一个连接上的不同请求标识码，与响应消息中的相对应</td>
<td>应答不做修改直接返回</td>
</tr>
<tr>
<td>flag</td>
<td>int</td>
<td>区分是普通RPC还是onewayRPC得标志</td>
<td>区分是普通RPC还是onewayRPC得标志</td>
</tr>
<tr>
<td>remark</td>
<td>String</td>
<td>传输自定义文本信息</td>
<td>传输自定义文本信息</td>
</tr>
<tr>
<td>extFields</td>
<td>HashMap&lt;String, String&gt;</td>
<td>请求自定义扩展信息</td>
<td>响应自定义扩展信息</td>
</tr>
</tbody></table>
<p>RemotingCommand类里关于消息Header的数据声明：</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 响应码/请求操作码</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> code;</span><br><span class="line"><span class="comment">// RocketMQ定义的枚举类型，支持JAVA、CPP、PYTHON、GO、OHP、RUBY等</span></span><br><span class="line"><span class="keyword">private</span> LanguageCode language = LanguageCode.JAVA;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> version = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 请求码</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> opaque = requestId.getAndIncrement();</span><br><span class="line"><span class="comment">// flag为0表示request， flag为1表示response， flag为2或者3，表示OneWayRPC</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> remark;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; extFields;</span><br><span class="line"><span class="comment">// 不同请求类型的请求头的特殊字段的序列化处理类，与extFields搭配使用</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> CommandCustomHeader customHeader;</span><br><span class="line"><span class="comment">// 当前RPC的序列化方式，默认与服务器配置相同。RocketMQ支持两种序列化方式：Json以及自定义的RocketMQ消息</span></span><br><span class="line"><span class="keyword">private</span> SerializeType serializeTypeCurrentRPC = serializeTypeConfigInThisServer;</span><br></pre></td></tr></table></figure>
<h2 id="消息编码"><a href="#消息编码" class="headerlink" title="消息编码"></a>消息编码</h2><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 消息编码</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ByteBuffer <span class="title">encode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1&gt; header length size，RocketMQ消息的长度，占用4个字节</span></span><br><span class="line">    <span class="keyword">int</span> length = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2&gt; header data length 序列化消息头并获取对应消息头的长度</span></span><br><span class="line">    <span class="keyword">byte</span>[] headerData = <span class="keyword">this</span>.headerEncode();</span><br><span class="line">    length += headerData.length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3&gt; body data length 消息正文的数据长度</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.body != null) &#123;</span><br><span class="line">        length += body.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 分配4+length个字节的缓冲区，其中4是序列化方式+表示消息头长度的数值占用的字节</span></span><br><span class="line">    ByteBuffer result = ByteBuffer.allocate(<span class="number">4</span> + length);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// length 编码消息数据，最开始的4个字节是消息长度</span></span><br><span class="line">    result.putInt(length);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// header length 写入序列化类型和消息头长度的数据</span></span><br><span class="line">    result.<span class="built_in">put</span>(markProtocolType(headerData.length, serializeTypeCurrentRPC));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// header data 写入消息头</span></span><br><span class="line">    result.<span class="built_in">put</span>(headerData);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// body data; 写入消息正文数据</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.body != null) &#123;</span><br><span class="line">        result.<span class="built_in">put</span>(<span class="keyword">this</span>.body);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 翻转Bytebuffer的活动区域为写入的数据</span></span><br><span class="line">    result.flip();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">byte</span>[] headerEncode() &#123;</span><br><span class="line">    <span class="keyword">this</span>.makeCustomHeaderToNet();</span><br><span class="line">    <span class="comment">// 根据不同的序列化方式序列化消息头</span></span><br><span class="line">    <span class="keyword">if</span> (SerializeType.ROCKETMQ == serializeTypeCurrentRPC) &#123;</span><br><span class="line">        <span class="keyword">return</span> RocketMQSerializable.rocketMQProtocolEncode(<span class="keyword">this</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> RemotingSerializable.encode(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 利用反射获取自定义消息头相关的拓展字段</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeCustomHeaderToNet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.customHeader != null) &#123;</span><br><span class="line">        Field[] fields = getClazzFields(customHeader.getClass());</span><br><span class="line">        <span class="keyword">if</span> (null == <span class="keyword">this</span>.extFields) &#123;</span><br><span class="line">            <span class="keyword">this</span>.extFields = <span class="keyword">new</span> HashMap&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!Modifier.isStatic(field.<span class="built_in">getModifiers</span>())) &#123;</span><br><span class="line">                <span class="keyword">String</span> name = field.getName();</span><br><span class="line">                <span class="keyword">if</span> (!name.startsWith(<span class="string">&quot;this&quot;</span>)) &#123;</span><br><span class="line">                    Object value = null;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 利用反射打开属性的访问权限的开关</span></span><br><span class="line">                        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                        value = field.<span class="built_in">get</span>(<span class="keyword">this</span>.customHeader);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        <span class="built_in">log</span>.error(<span class="string">&quot;Failed to access field [&#123;&#125;]&quot;</span>, name, e);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (value != null) &#123;</span><br><span class="line">                        <span class="keyword">this</span>.extFields.<span class="built_in">put</span>(name, value.toString());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 编码消息头</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ByteBuffer <span class="title">encodeHeader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> encodeHeader(<span class="keyword">this</span>.body != null ? <span class="keyword">this</span>.body.length : <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ByteBuffer <span class="title">encodeHeader</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> bodyLength)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1&gt; header length size</span></span><br><span class="line">    <span class="keyword">int</span> length = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2&gt; header data length</span></span><br><span class="line">    <span class="keyword">byte</span>[] headerData;</span><br><span class="line">    headerData = <span class="keyword">this</span>.headerEncode();</span><br><span class="line"></span><br><span class="line">    length += headerData.length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3&gt; body data length</span></span><br><span class="line">    length += bodyLength;</span><br><span class="line">    <span class="comment">// 分配除了正文外的缓冲区</span></span><br><span class="line">    ByteBuffer result = ByteBuffer.allocate(<span class="number">4</span> + length - bodyLength);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// length</span></span><br><span class="line">    result.putInt(length);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// header length</span></span><br><span class="line">    result.<span class="built_in">put</span>(markProtocolType(headerData.length, serializeTypeCurrentRPC));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// header data</span></span><br><span class="line">    result.<span class="built_in">put</span>(headerData);</span><br><span class="line"></span><br><span class="line">    result.flip();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 编码消息的序列化类型加消息头长度的信息， 占据4个字节</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] markProtocolType(<span class="keyword">int</span> source, SerializeType type) &#123;</span><br><span class="line">    <span class="keyword">byte</span>[] result = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span>];</span><br><span class="line">    <span class="comment">// 序列化类型：0表示json而1表示RocketMQ</span></span><br><span class="line">    result[<span class="number">0</span>] = type.getCode();</span><br><span class="line">    result[<span class="number">1</span>] = (<span class="keyword">byte</span>) ((source &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>);</span><br><span class="line">    result[<span class="number">2</span>] = (<span class="keyword">byte</span>) ((source &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>);</span><br><span class="line">    result[<span class="number">3</span>] = (<span class="keyword">byte</span>) (source &amp; <span class="number">0xFF</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="消息编码-1"><a href="#消息编码-1" class="headerlink" title="消息编码"></a>消息编码</h2><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 消息解码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RemotingCommand <span class="title">decode</span><span class="params">(<span class="keyword">final</span> <span class="keyword">byte</span>[] <span class="built_in">array</span>)</span> </span>&#123;</span><br><span class="line">    ByteBuffer byteBuffer = ByteBuffer.wrap(<span class="built_in">array</span>);</span><br><span class="line">    <span class="keyword">return</span> decode(byteBuffer);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 消息解码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RemotingCommand <span class="title">decode</span><span class="params">(<span class="keyword">final</span> ByteBuffer byteBuffer)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 消息长度</span></span><br><span class="line">    <span class="keyword">int</span> length = byteBuffer.limit();</span><br><span class="line">    <span class="comment">// 取消息的前四个字节，其中第一个字节表示序列化类型后三个字节表示消息头的长度，byteBuffer的position向后移动四个字节</span></span><br><span class="line">    <span class="keyword">int</span> oriHeaderLen = byteBuffer.getInt();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> headerLength = getHeaderLength(oriHeaderLen);</span><br><span class="line">    <span class="comment">// 获取消息头数据</span></span><br><span class="line">    <span class="keyword">byte</span>[] headerData = <span class="keyword">new</span> <span class="keyword">byte</span>[headerLength];</span><br><span class="line">    byteBuffer.<span class="built_in">get</span>(headerData);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反序列化headerData为RemotingCommand对象</span></span><br><span class="line">    RemotingCommand cmd = headerDecode(headerData, getProtocolType(oriHeaderLen));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取消息正文的长度：消息的长度减去固定的四个字节（序列化类型+消息头的长度字节）再减去消息头的长度</span></span><br><span class="line">    <span class="keyword">int</span> bodyLength = length - <span class="number">4</span> - headerLength;</span><br><span class="line">    <span class="keyword">byte</span>[] bodyData = null;</span><br><span class="line">    <span class="keyword">if</span> (bodyLength &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 填充消息正文内容</span></span><br><span class="line">        bodyData = <span class="keyword">new</span> <span class="keyword">byte</span>[bodyLength];</span><br><span class="line">        byteBuffer.<span class="built_in">get</span>(bodyData);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 填充RemotingCommand的body属性</span></span><br><span class="line">    cmd.body = bodyData;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cmd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getHeaderLength</span><span class="params">(<span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 取最后三个字节，表示消息头的长度</span></span><br><span class="line">    <span class="keyword">return</span> length &amp; <span class="number">0xFFFFFF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> RemotingCommand <span class="title">headerDecode</span><span class="params">(<span class="keyword">byte</span>[] headerData, SerializeType type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">        <span class="keyword">case</span> JSON:</span><br><span class="line">            RemotingCommand resultJson = RemotingSerializable.decode(headerData, RemotingCommand.class);</span><br><span class="line">            resultJson.setSerializeTypeCurrentRPC(type);</span><br><span class="line">            <span class="keyword">return</span> resultJson;</span><br><span class="line">        <span class="keyword">case</span> ROCKETMQ:</span><br><span class="line">            RemotingCommand resultRMQ = RocketMQSerializable.rocketMQProtocolDecode(headerData);</span><br><span class="line">            resultRMQ.setSerializeTypeCurrentRPC(type);</span><br><span class="line">            <span class="keyword">return</span> resultRMQ;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SerializeType <span class="title">getProtocolType</span><span class="params">(<span class="keyword">int</span> source)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 截断保留source的第一个字节，表示序列化类型</span></span><br><span class="line">    <span class="keyword">return</span> SerializeType.valueOf((<span class="keyword">byte</span>) ((source &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>消息队列</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>链表反转系列</title>
    <url>/2019/04/05/%E9%93%BE%E8%A1%A8%E5%8F%8D%E8%BD%AC%E7%B3%BB%E5%88%97/</url>
    <content><![CDATA[<h1 id="剑指-Offer-24-反转链表"><a href="#剑指-Offer-24-反转链表" class="headerlink" title="剑指 Offer 24. 反转链表"></a>剑指 Offer 24. 反转链表</h1><p>定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。</p>
<p>示例：</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">输入: <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span>-&gt;NULL</span><br><span class="line">输出: <span class="number">5</span>-&gt;<span class="number">4</span>-&gt;<span class="number">3</span>-&gt;<span class="number">2</span>-&gt;<span class="number">1</span>-&gt;NULL</span><br></pre></td></tr></table></figure>
<p>限制:</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">0 </span>&lt;= 节点个数 &lt;= <span class="number">5000</span></span><br></pre></td></tr></table></figure>

<p>解法：</p>
<figure class="highlight ocaml"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * <span class="type">Definition</span> <span class="keyword">for</span> singly-linked <span class="built_in">list</span>.</span><br><span class="line"> * public <span class="keyword">class</span> <span class="type">ListNode</span> &#123;</span><br><span class="line"> *     <span class="built_in">int</span> <span class="keyword">val</span>;</span><br><span class="line"> *     <span class="type">ListNode</span> next;</span><br><span class="line"> *     <span class="type">ListNode</span>(<span class="built_in">int</span> x) &#123; <span class="keyword">val</span> = x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">class</span> <span class="type">Solution</span> &#123;</span><br><span class="line">    public <span class="type">ListNode</span> reverseList(<span class="type">ListNode</span> head) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法题</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>C++之extern</title>
    <url>/2019/03/17/C-%E4%B9%8Bextern/</url>
    <content><![CDATA[<p>extern可以置于变量或者函数前，以标示变量或者函数的定义在别的文件中，提示编译器遇到此变量和函数时在其他模块中寻找其定义。<br>此外extern也可用来进行链接指定。</p>
<h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><ol>
<li><p>与“C”连用进行链接指定</p>
<p>比如: </p>
<p><code>extern &quot;C&quot; void fun(int a, int b);</code></p>
<p> 则告诉编译器在编译fun这个函数名时按着C的规则去翻译相应的函数名</p>
</li>
<li><p>extern声明变量</p>
<p> 比如，头文件 testExample.h</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> b;</span><br></pre></td></tr></table></figure>
<p> 源程序 testExample.c</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;testExample.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<p>主函数 main.c</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;testExample.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d , b = %d\n&quot;</span>, a, b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中，a，b的声明也可放在main.c中。此时，就不需要包含 testExample.h这个头文件了。代码如下：</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> b;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d , b = %d\n&quot;</span>, a, b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>extern声明函数</p>
<p>比如，头文件 testExample.h</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> b;</span><br><span class="line"><span class="comment">//函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br></pre></td></tr></table></figure>
<p>源程序 testExample.c</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;testExample.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主函数 main.c</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;testExample.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d , b = %d\n&quot;</span>, a, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;add(a, b) = %d\n&quot;</span>, add(a, b));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中，a，b的声明也可放在main.c中。此时，就不需要包含 testExample.h这个头文件了。代码如下：</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> b;</span><br><span class="line">   </span><br><span class="line"><span class="comment">//函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d , b = %d\n&quot;</span>, a, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;add(a, b) = %d\n&quot;</span>, add(a, b));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="extern-与-static"><a href="#extern-与-static" class="headerlink" title="extern 与 static"></a>extern 与 static</h1><p>(1) extern 表明引用外部其他模块/单元定义的变量或者函数。</p>
<p>(2) static 表示静态变量，分配内存的时候, 存储在静态区而不是栈上面。static修饰全局变量的作用域只能是本身的编译单元，所以一般定义static全局变量时，都把它放在原文件中而不是头文件。</p>
<p><em><strong>extern和static不能同时修饰一个变量</strong></em></p>
<h1 id="extern-与-const"><a href="#extern-与-const" class="headerlink" title="extern 与 const"></a>extern 与 const</h1><p>C++中const修饰的全局常量据有跟static相同的特性，即它们只能作用于本编译模块中。但是const可以与extern连用来声明该常量可以作用于其他编译模块中。当与extern一起合作的时候，它的特性就跟extern的一样，表示一个定义了的全局变量。</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>JVM类加载机制</title>
    <url>/2018/03/24/JVM%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<p>一个.java文件从编码完成到最终执行，一般主要包括两个过程：编译和运行，其中编译就是通过javac编译器将.java文件转换成编译成字节码.class文件；然后运行则是把.class文件交给JVM执行的过程。<br>一个Java类从字节代码到能够在JVM中被使用，需要经过加载、链接和初始化这三个步骤，我们称之为类加载。下面我们就开始详解这三个步骤。</p>
<h2 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h2><p>把class字节码文件通过类加载器装载入内存中的阶段。在该阶段，JVM需要完成：</p>
<ol>
<li>通过一个类的全限定名来获取其定义的二进制字节流。</li>
<li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</li>
<li>在Java堆中生成一个代表这个类的java.lang.Class对象，作为对方法区中这些数据的访问入口。</li>
</ol>
<p>类加载器可以分为：</p>
<ol>
<li>引导类加载器：最顶层的类加载器，负责加载JAVA_HOME\lib目录中的，或通过-Xbootclasspath参数指定路径中的，且被JVM认可（按文件名识别，如rt.jar）的类。</li>
<li>扩展类加载器：负责加载JAVA_HOME\lib\ext目录中的，或通过java.ext.dirs系统变量指定路径中的类库。</li>
<li>应用类加载器：可以通过getSystemClassLoader()获取，负责加载用户路径（classpath）上的类库。如果没有自定义类加载器，该类加载器就是默认的类加载器。</li>
<li>用户自定义的类加载器：继承自java.lang.ClassLoader类。</li>
</ol>
<p>类加载器的工作方式：</p>
<ol>
<li>双亲委派模型：加载过程中会先检查类是否被已加载，检查顺序是自底向上，从用户自定义类加载器到引导类加载器逐层检查，只要某个classloader已加载，就视为已加载此类，保证此类只会被所有ClassLoader加载一次。而加载的顺序是自顶向下，也就是由上层来逐层尝试加载此类。</li>
<li>代理模式：指的是一个类加载器既可以自己完成Java类的加载工作，也可以代理给其它的类加载器来完成。由于代理模式的存在，启动一个类的加载过程的类加载器和最终加载这个类的类加载器可能并不是一个。前者称为初始类加载器，而后者称为定义类加载器。一个Java类的定义类加载器是该类所导入的其它Java类的初始类加载器。</li>
</ol>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>链接阶段又分为验证、准备和解析。</p>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>主要是为了保证加载进来的字节流符合虚拟机规范，不会造成安全错误。如果验证过程出现错误的话，会抛出java.lang.VerifyError错误。</p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2>]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Annotation(java注解)</title>
    <url>/2018/03/18/Annotation-java%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<p>注解提供一种为程序元素设置元数据的方法。元数据就是关于数据的数据，可以用来生成文档，进行代码分析或者使编译器对元数据进行编译检查。<br>可以使用注解解析工具或编译器对其进行解析，也可以指定注解在编译期或运行期有效。<br>　　　　　　　　　　　　　　　　　　　　　　<br>注解的基本原则是：无论增加或者删除一个注解都不能对代码造成干扰。</p>
<h2 id="系统注解"><a href="#系统注解" class="headerlink" title="系统注解"></a>系统注解</h2><p>　　1. Override：保证override函数的正确生明</p>
<p>　　2. Deprecated：对于过时不再使用的函数添加该注解，当该函数被调用时，编译时会提示。与javadoc的@deprecated类似，但前者不可以带参数</p>
<p>　　3. SupressWarnings： 配合参数表示关闭特定的警告信息。参数有：</p>
<p>　　　　　|参数名 | 语法格式 |<br>        | :— |  :—  |<br>     　　| deprecation | 使用了过时的类或者方法的警告  |<br>    　　 | unchecked |  执行了未检查的转换时警告  |<br>        | fallthrough |  switch语句某case下没有break语句直接通往下一个case的警告  |<br>    　　 | path |  在类路径或者源文件路径中存在不存在的路径的警告  |<br>        | finally |  finally语句不能正确执行的警告 |<br>        | all |  关闭所有警告信息  |</p>
<h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><pre><code>元注解的作用就是负责注解其他注解。Java5定义了4个标准的Meta Annotation类型，它们被用来提供对其它 Annotation类型作说明。
</code></pre>
<p>　　　1. Target</p>
<p>　　　　　　作用：用于描述注解的使用范围，即被描述的注解可以用在什么地方</p>
<p>　　　　　　用法： @Target(ElementType.参数,…)</p>
<p>　　　　　　参数：</p>
<p>　　　　　　　　　CONSTRUCTOR：用于描述构造器</p>
<p>　　　　　　　　　FIELD：用于描述域</p>
<p>　　　　　　　　　LOCAL_VARIABLE：用于描述局部变量</p>
<p>　　　　　　　　　METHOD：用于描述方法</p>
<p>　　　　　　　　　PACKAGE：用于描述包</p>
<p>　　　　　　　　　PARAMETER：用于描述参数</p>
<p>　　　　　　　　　TYPE：用于描述类、接口(包括注解类型) 或enum声明</p>
<p>　　　2. Retention</p>
<p>　　　　　　作用： 标识该Annotation的生命周期</p>
<p>　　　　　　用法：　@Retention(RetentionPolicy.参数)</p>
<p>　　　　　　参数：</p>
<p>　　　　　　　　　SOURCE:在源文件中有效（即源文件保留），被编译器丢弃</p>
<p>　　　　　　　　　CLASS:在class文件中有效（即class保留），编译在class文件中的Annotation可能会被虚拟机忽略</p>
<p>　　　　　　　　　RUNTIME:在运行时有效（即运行时保留）</p>
<p>　　　3. Documented</p>
<p>　　　　　　<em><strong>@Documented是一个标记注解，没有成员</strong></em></p>
<p>　　　　　　作用：用于描述其它类型的annotation应该被作为被标注的程序成员的公共API，因此可以被例如javadoc此类的工具文档化。</p>
<p>　　　4.　Inherited</p>
<p>　　　　　　<em><strong>@Inherited 是一个标记注解。</strong></em></p>
<p>　　　　　  　作用: 如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个Annotation将被用于该class的子类。</p>
<h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><p>　　　Annotation类型使用关键字@interface而非interface，注意开头的@符号。interface可以被实现或者继承，Annotation不可以。</p>
]]></content>
  </entry>
</search>
